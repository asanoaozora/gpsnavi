
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_psa_github_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_locationinput_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx___home_psa_github_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_locationinput_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class LocationInput_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    LocationInput_adaptor()
    : ::DBus::InterfaceAdaptor("org.genivi.navigation.navigationcore.LocationInput")
    {
        register_method(LocationInput_adaptor, GetVersion, _GetVersion_stub);
        register_method(LocationInput_adaptor, CreateLocationInput, _CreateLocationInput_stub);
        register_method(LocationInput_adaptor, DeleteLocationInput, _DeleteLocationInput_stub);
        register_method(LocationInput_adaptor, GetSupportedAddressAttributes, _GetSupportedAddressAttributes_stub);
        register_method(LocationInput_adaptor, SetAddress, _SetAddress_stub);
        register_method(LocationInput_adaptor, SetSelectionCriterion, _SetSelectionCriterion_stub);
        register_method(LocationInput_adaptor, Spell, _Spell_stub);
        register_method(LocationInput_adaptor, Search, _Search_stub);
        register_method(LocationInput_adaptor, RequestListUpdate, _RequestListUpdate_stub);
        register_method(LocationInput_adaptor, SelectEntry, _SelectEntry_stub);
        register_method(LocationInput_adaptor, GetEntry, _GetEntry_stub);
        register_method(LocationInput_adaptor, ValidateAddress, _ValidateAddress_stub);
        register_method(LocationInput_adaptor, ReverseGeocode, _ReverseGeocode_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument GetVersion_args[] = 
        {
            { "version", "(qqqs)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CreateLocationInput_args[] = 
        {
            { "sessionHandle", "u", true },
            { "error", "i", false },
            { "locationInputHandle", "u", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DeleteLocationInput_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "error", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSupportedAddressAttributes_args[] = 
        {
            { "addressAttributesList", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetAddress_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "address", "a{i(yv)}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetSelectionCriterion_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "selectionCriterion", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Spell_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "inputCharacter", "s", true },
            { "maxWindowSize", "q", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Search_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "inputString", "s", true },
            { "maxWindowSize", "q", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RequestListUpdate_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "offset", "q", true },
            { "maxWindowSize", "q", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SelectEntry_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "index", "q", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetEntry_args[] = 
        {
            { "locationInputHandle", "u", true },
            { "index", "q", true },
            { "address", "a{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ValidateAddress_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "inputAddress", "a{i(yv)}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ReverseGeocode_args[] = 
        {
            { "sessionHandle", "u", true },
            { "locationInputHandle", "u", true },
            { "coordinate", "(dd)", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CurrentSelectionCriterion_args[] = 
        {
            { "locationInputHandle", "u", false },
            { "selectionCriterion", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SearchStatus_args[] = 
        {
            { "locationInputHandle", "u", false },
            { "statusValue", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SpellResult_args[] = 
        {
            { "locationInputHandle", "u", false },
            { "uniqueString", "s", false },
            { "validCharacters", "s", false },
            { "fullMatch", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SearchResultList_args[] = 
        {
            { "locationInputHandle", "u", false },
            { "totalSize", "q", false },
            { "windowOffset", "q", false },
            { "windowSize", "q", false },
            { "resultListWindow", "aa{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SearchResultListSizeChanged_args[] = 
        {
            { "locationInputHandle", "u", false },
            { "totalSize", "q", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ContentUpdated_args[] = 
        {
            { "locationInputHandle", "u", false },
            { "guidable", "b", false },
            { "availableSelectionCriteria", "ai", false },
            { "address", "a{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AddressValidationResult_args[] = 
        {
            { "locationInputHandle", "u", false },
            { "validatedAddressList", "aa{i(yv)}", false },
            { "validationStatusList", "aa{ii}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod LocationInput_adaptor_methods[] = 
        {
            { "GetVersion", GetVersion_args },
            { "CreateLocationInput", CreateLocationInput_args },
            { "DeleteLocationInput", DeleteLocationInput_args },
            { "GetSupportedAddressAttributes", GetSupportedAddressAttributes_args },
            { "SetAddress", SetAddress_args },
            { "SetSelectionCriterion", SetSelectionCriterion_args },
            { "Spell", Spell_args },
            { "Search", Search_args },
            { "RequestListUpdate", RequestListUpdate_args },
            { "SelectEntry", SelectEntry_args },
            { "GetEntry", GetEntry_args },
            { "ValidateAddress", ValidateAddress_args },
            { "ReverseGeocode", ReverseGeocode_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod LocationInput_adaptor_signals[] = 
        {
            { "CurrentSelectionCriterion", CurrentSelectionCriterion_args },
            { "SearchStatus", SearchStatus_args },
            { "SpellResult", SpellResult_args },
            { "SearchResultList", SearchResultList_args },
            { "SearchResultListSizeChanged", SearchResultListSizeChanged_args },
            { "ContentUpdated", ContentUpdated_args },
            { "AddressValidationResult", AddressValidationResult_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty LocationInput_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface LocationInput_adaptor_interface = 
        {
            "org.genivi.navigation.navigationcore.LocationInput",
            LocationInput_adaptor_methods,
            LocationInput_adaptor_signals,
            LocationInput_adaptor_properties
        };
        return &LocationInput_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion() = 0;
    virtual void CreateLocationInput(const uint32_t& sessionHandle, int32_t& error, uint32_t& locationInputHandle) = 0;
    virtual int32_t DeleteLocationInput(const uint32_t& sessionHandle, const uint32_t& locationInputHandle) = 0;
    virtual std::vector< int32_t > GetSupportedAddressAttributes() = 0;
    virtual void SetAddress(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > >& address) = 0;
    virtual void SetSelectionCriterion(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const int32_t& selectionCriterion) = 0;
    virtual void Spell(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const std::string& inputCharacter, const uint16_t& maxWindowSize) = 0;
    virtual void Search(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const std::string& inputString, const uint16_t& maxWindowSize) = 0;
    virtual void RequestListUpdate(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const uint16_t& offset, const uint16_t& maxWindowSize) = 0;
    virtual void SelectEntry(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const uint16_t& index) = 0;
    virtual std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetEntry(const uint32_t& locationInputHandle, const uint16_t& index) = 0;
    virtual void ValidateAddress(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > >& inputAddress) = 0;
    virtual void ReverseGeocode(const uint32_t& sessionHandle, const uint32_t& locationInputHandle, const ::DBus::Struct< double, double >& coordinate) = 0;

public:

    /* signal emitters for this interface
     */
    void CurrentSelectionCriterion(const uint32_t& arg1, const int32_t& arg2)
    {
        ::DBus::SignalMessage sig("CurrentSelectionCriterion");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void SearchStatus(const uint32_t& arg1, const int32_t& arg2)
    {
        ::DBus::SignalMessage sig("SearchStatus");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void SpellResult(const uint32_t& arg1, const std::string& arg2, const std::string& arg3, const bool& arg4)
    {
        ::DBus::SignalMessage sig("SpellResult");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        wi << arg4;
        emit_signal(sig);
    }
    void SearchResultList(const uint32_t& arg1, const uint16_t& arg2, const uint16_t& arg3, const uint16_t& arg4, const std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > >& arg5)
    {
        ::DBus::SignalMessage sig("SearchResultList");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        wi << arg4;
        wi << arg5;
        emit_signal(sig);
    }
    void SearchResultListSizeChanged(const uint32_t& arg1, const uint16_t& arg2)
    {
        ::DBus::SignalMessage sig("SearchResultListSizeChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void ContentUpdated(const uint32_t& arg1, const bool& arg2, const std::vector< int32_t >& arg3, const std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > >& arg4)
    {
        ::DBus::SignalMessage sig("ContentUpdated");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        wi << arg4;
        emit_signal(sig);
    }
    void AddressValidationResult(const uint32_t& arg1, const std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > >& arg2, const std::vector< std::map< int32_t, int32_t > >& arg3)
    {
        ::DBus::SignalMessage sig("AddressValidationResult");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetVersion_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout1 = GetVersion();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _CreateLocationInput_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        int32_t argout1;
        uint32_t argout2;
        CreateLocationInput(argin1, argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _DeleteLocationInput_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        int32_t argout1 = DeleteLocationInput(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetSupportedAddressAttributes_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argout1 = GetSupportedAddressAttributes();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetAddress_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argin3; ri >> argin3;
        SetAddress(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _SetSelectionCriterion_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        int32_t argin3; ri >> argin3;
        SetSelectionCriterion(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Spell_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        uint16_t argin4; ri >> argin4;
        Spell(argin1, argin2, argin3, argin4);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Search_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        uint16_t argin4; ri >> argin4;
        Search(argin1, argin2, argin3, argin4);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _RequestListUpdate_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        uint16_t argin3; ri >> argin3;
        uint16_t argin4; ri >> argin4;
        RequestListUpdate(argin1, argin2, argin3, argin4);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _SelectEntry_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        uint16_t argin3; ri >> argin3;
        SelectEntry(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetEntry_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint16_t argin2; ri >> argin2;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout1 = GetEntry(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ValidateAddress_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argin3; ri >> argin3;
        ValidateAddress(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _ReverseGeocode_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        ::DBus::Struct< double, double > argin3; ri >> argin3;
        ReverseGeocode(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } } 
#endif //__dbusxx___home_psa_github_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_locationinput_adaptor_h__ADAPTOR_MARSHAL_H
