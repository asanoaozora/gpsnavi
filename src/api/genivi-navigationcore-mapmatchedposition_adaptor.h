
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_psa_github_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_mapmatchedposition_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx___home_psa_github_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_mapmatchedposition_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class MapMatchedPosition_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    MapMatchedPosition_adaptor()
    : ::DBus::InterfaceAdaptor("org.genivi.navigation.navigationcore.MapMatchedPosition")
    {
        register_method(MapMatchedPosition_adaptor, GetVersion, _GetVersion_stub);
        register_method(MapMatchedPosition_adaptor, SetSimulationMode, _SetSimulationMode_stub);
        register_method(MapMatchedPosition_adaptor, GetSimulationStatus, _GetSimulationStatus_stub);
        register_method(MapMatchedPosition_adaptor, subscribeForsimulationStatusChangedSelective, _subscribeForsimulationStatusChangedSelective_stub);
        register_method(MapMatchedPosition_adaptor, unsubscribeFromsimulationStatusChangedSelective, _unsubscribeFromsimulationStatusChangedSelective_stub);
        register_method(MapMatchedPosition_adaptor, SetSimulationSpeed, _SetSimulationSpeed_stub);
        register_method(MapMatchedPosition_adaptor, GetSimulationSpeed, _GetSimulationSpeed_stub);
        register_method(MapMatchedPosition_adaptor, subscribeForsimulationSpeedChangedSelective, _subscribeForsimulationSpeedChangedSelective_stub);
        register_method(MapMatchedPosition_adaptor, unsubscribeFromsimulationSpeedChangedSelective, _unsubscribeFromsimulationSpeedChangedSelective_stub);
        register_method(MapMatchedPosition_adaptor, StartSimulation, _StartSimulation_stub);
        register_method(MapMatchedPosition_adaptor, PauseSimulation, _PauseSimulation_stub);
        register_method(MapMatchedPosition_adaptor, GetPosition, _GetPosition_stub);
        register_method(MapMatchedPosition_adaptor, SetPosition, _SetPosition_stub);
        register_method(MapMatchedPosition_adaptor, GetCurrentAddress, _GetCurrentAddress_stub);
        register_method(MapMatchedPosition_adaptor, GetPositionOnSegment, _GetPositionOnSegment_stub);
        register_method(MapMatchedPosition_adaptor, GetStatus, _GetStatus_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument GetVersion_args[] = 
        {
            { "version", "(qqqs)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetSimulationMode_args[] = 
        {
            { "sessionHandle", "u", true },
            { "activate", "b", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSimulationStatus_args[] = 
        {
            { "simulationStatus", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument subscribeForsimulationStatusChangedSelective_args[] = 
        {
            { "status", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument unsubscribeFromsimulationStatusChangedSelective_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetSimulationSpeed_args[] = 
        {
            { "sessionHandle", "u", true },
            { "speedFactor", "y", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSimulationSpeed_args[] = 
        {
            { "speedFactor", "y", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument subscribeForsimulationSpeedChangedSelective_args[] = 
        {
            { "status", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument unsubscribeFromsimulationSpeedChangedSelective_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument StartSimulation_args[] = 
        {
            { "sessionHandle", "u", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PauseSimulation_args[] = 
        {
            { "sessionHandle", "u", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetPosition_args[] = 
        {
            { "valuesToReturn", "ai", true },
            { "error", "i", false },
            { "position", "a{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetPosition_args[] = 
        {
            { "sessionHandle", "u", true },
            { "position", "a{i(yv)}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetCurrentAddress_args[] = 
        {
            { "valuesToReturn", "ai", true },
            { "error", "i", false },
            { "address", "a{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetPositionOnSegment_args[] = 
        {
            { "valuesToReturn", "ai", true },
            { "positionOnSegment", "a{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetStatus_args[] = 
        {
            { "valuesToReturn", "ai", true },
            { "status", "a{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SimulationStatusChanged_args[] = 
        {
            { "simulationStatus", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SimulationSpeedChanged_args[] = 
        {
            { "speedFactor", "y", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PositionUpdate_args[] = 
        {
            { "changedValues", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AddressUpdate_args[] = 
        {
            { "changedValues", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument PositionOnSegmentUpdate_args[] = 
        {
            { "changedValues", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument StatusUpdate_args[] = 
        {
            { "changedValues", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument OffRoadPositionChanged_args[] = 
        {
            { "distance", "u", false },
            { "direction", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod MapMatchedPosition_adaptor_methods[] = 
        {
            { "GetVersion", GetVersion_args },
            { "SetSimulationMode", SetSimulationMode_args },
            { "GetSimulationStatus", GetSimulationStatus_args },
            { "subscribeForsimulationStatusChangedSelective", subscribeForsimulationStatusChangedSelective_args },
            { "unsubscribeFromsimulationStatusChangedSelective", unsubscribeFromsimulationStatusChangedSelective_args },
            { "SetSimulationSpeed", SetSimulationSpeed_args },
            { "GetSimulationSpeed", GetSimulationSpeed_args },
            { "subscribeForsimulationSpeedChangedSelective", subscribeForsimulationSpeedChangedSelective_args },
            { "unsubscribeFromsimulationSpeedChangedSelective", unsubscribeFromsimulationSpeedChangedSelective_args },
            { "StartSimulation", StartSimulation_args },
            { "PauseSimulation", PauseSimulation_args },
            { "GetPosition", GetPosition_args },
            { "SetPosition", SetPosition_args },
            { "GetCurrentAddress", GetCurrentAddress_args },
            { "GetPositionOnSegment", GetPositionOnSegment_args },
            { "GetStatus", GetStatus_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod MapMatchedPosition_adaptor_signals[] = 
        {
            { "SimulationStatusChanged", SimulationStatusChanged_args },
            { "SimulationSpeedChanged", SimulationSpeedChanged_args },
            { "PositionUpdate", PositionUpdate_args },
            { "AddressUpdate", AddressUpdate_args },
            { "PositionOnSegmentUpdate", PositionOnSegmentUpdate_args },
            { "StatusUpdate", StatusUpdate_args },
            { "OffRoadPositionChanged", OffRoadPositionChanged_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty MapMatchedPosition_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface MapMatchedPosition_adaptor_interface = 
        {
            "org.genivi.navigation.navigationcore.MapMatchedPosition",
            MapMatchedPosition_adaptor_methods,
            MapMatchedPosition_adaptor_signals,
            MapMatchedPosition_adaptor_properties
        };
        return &MapMatchedPosition_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion() = 0;
    virtual void SetSimulationMode(const uint32_t& sessionHandle, const bool& activate) = 0;
    virtual int32_t GetSimulationStatus() = 0;
    virtual bool subscribeForsimulationStatusChangedSelective() = 0;
    virtual void unsubscribeFromsimulationStatusChangedSelective() = 0;
    virtual void SetSimulationSpeed(const uint32_t& sessionHandle, const uint8_t& speedFactor) = 0;
    virtual uint8_t GetSimulationSpeed() = 0;
    virtual bool subscribeForsimulationSpeedChangedSelective() = 0;
    virtual void unsubscribeFromsimulationSpeedChangedSelective() = 0;
    virtual void StartSimulation(const uint32_t& sessionHandle) = 0;
    virtual void PauseSimulation(const uint32_t& sessionHandle) = 0;
    virtual void GetPosition(const std::vector< int32_t >& valuesToReturn, int32_t& error, std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > >& position) = 0;
    virtual void SetPosition(const uint32_t& sessionHandle, const std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > >& position) = 0;
    virtual void GetCurrentAddress(const std::vector< int32_t >& valuesToReturn, int32_t& error, std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > >& address) = 0;
    virtual std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetPositionOnSegment(const std::vector< int32_t >& valuesToReturn) = 0;
    virtual std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetStatus(const std::vector< int32_t >& valuesToReturn) = 0;

public:

    /* signal emitters for this interface
     */
    void SimulationStatusChanged(const int32_t& arg1)
    {
        ::DBus::SignalMessage sig("SimulationStatusChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void SimulationSpeedChanged(const uint8_t& arg1)
    {
        ::DBus::SignalMessage sig("SimulationSpeedChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void PositionUpdate(const std::vector< int32_t >& arg1)
    {
        ::DBus::SignalMessage sig("PositionUpdate");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void AddressUpdate(const std::vector< int32_t >& arg1)
    {
        ::DBus::SignalMessage sig("AddressUpdate");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void PositionOnSegmentUpdate(const std::vector< int32_t >& arg1)
    {
        ::DBus::SignalMessage sig("PositionOnSegmentUpdate");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void StatusUpdate(const std::vector< int32_t >& arg1)
    {
        ::DBus::SignalMessage sig("StatusUpdate");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void OffRoadPositionChanged(const uint32_t& arg1, const int32_t& arg2)
    {
        ::DBus::SignalMessage sig("OffRoadPositionChanged");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetVersion_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout1 = GetVersion();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetSimulationMode_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        bool argin2; ri >> argin2;
        SetSimulationMode(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetSimulationStatus_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = GetSimulationStatus();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _subscribeForsimulationStatusChangedSelective_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        bool argout1 = subscribeForsimulationStatusChangedSelective();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _unsubscribeFromsimulationStatusChangedSelective_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        unsubscribeFromsimulationStatusChangedSelective();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _SetSimulationSpeed_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint8_t argin2; ri >> argin2;
        SetSimulationSpeed(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetSimulationSpeed_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint8_t argout1 = GetSimulationSpeed();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _subscribeForsimulationSpeedChangedSelective_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        bool argout1 = subscribeForsimulationSpeedChangedSelective();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _unsubscribeFromsimulationSpeedChangedSelective_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        unsubscribeFromsimulationSpeedChangedSelective();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _StartSimulation_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        StartSimulation(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _PauseSimulation_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        PauseSimulation(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetPosition_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argin1; ri >> argin1;
        int32_t argout1;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout2;
        GetPosition(argin1, argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _SetPosition_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argin2; ri >> argin2;
        SetPosition(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetCurrentAddress_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argin1; ri >> argin1;
        int32_t argout1;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout2;
        GetCurrentAddress(argin1, argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _GetPositionOnSegment_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argin1; ri >> argin1;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout1 = GetPositionOnSegment(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetStatus_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argin1; ri >> argin1;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout1 = GetStatus(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } } 
#endif //__dbusxx___home_psa_github_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_mapmatchedposition_adaptor_h__ADAPTOR_MARSHAL_H
